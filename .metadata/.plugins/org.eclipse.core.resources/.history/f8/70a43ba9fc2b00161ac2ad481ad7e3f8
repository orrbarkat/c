#include "SPBPriorityQueue.h"
#include "SPList.h"
#include <assert.h>
#include <stdlib.h>


struct sp_bp_queue_t{
	SPList list;
	int bound;
};

SPBPQueue spBPQueueCreate(int maxSize){
	assert(maxSize>0);
	SPBPQueue queue = (SPBPQueue)malloc(sizeof(*queue));
	if (queue == NULL) {
		//TODO should we tell anyone??
		return NULL;
	} else {
		queue->list = spListCreate();
		queue->bound = maxSize;
	}
	return queue;
}

SPBPQueue spBPQueueCopy(SPBPQueue source){
	assert(source);
	SPBPQueue copy = spBPQueueCreate(source->bound);
	if (copy == NULL){
		return NULL;
	}
	spListDestroy(copy->list);
	copy->list = spListCopy(source->list)
	return copy;
}

void spBPQueueDestroy(SPBPQueue source){
	spListDestroy(source->list);
	free(source);
}

void spBPQueueClear(SPBPQueue source){
	assert(source);
	spListClear(source.list);
}

int spBPQueueSize(SPBPQueue source){
	assert(source);
	return source->list->size;
}

int spBPQueueGetMaxSize(SPBPQueue source){
	assert(source);
	return source->bound;
}

SP_BPQUEUE_MSG spBPQueueEnqueue(SPBPQueue source, SPListElement element){
	assert(source);
	assert(element);
	while(element->value<)
}

SPListElement spBPQueuePeek(SPBPQueue source){
	assert(source);
	if(isEmpty(source)){
		return NULL;
	}
	SPListElement ret = spListGetFirst(source->list);
	if (!ret){ return NULL;}
	return spListElementCopy(ret);
}

SPListElement spBPQueuePeekLast(SPBPQueue source){
	assert(source);
		if(isEmpty(source)){
			return NULL;
		}
		SPListElement ret = spListGetLast(source->list);
		if (!ret){ return NULL;}
		return spListElementCopy(ret);
}

double spBPQueueMinValue(SPBPQueue source){
	assert(source);
	if (isEmpty(source)){
		return NULL;
	}
	return spListGetFirst(source->list)->value;
}

double spBPQueueMinValue(SPBPQueue source){
	assert(source);
	if (isEmpty(source)){
		return NULL;
	}
	return spListGetLast(source->list)->value;
}

bool spBPQueueIsEmpty(SPBPQueue source){
	assert(source);
	if (spListGetSize(source->list)<1){
		return true;
	}
	return false;
}

bool spBPQueueIsFull(SPBPQueue source){
	assert(source);
	if (spListGetSize(source->list) == spBPQueueGetMaxSize(source)){
		return true;
	}
	return false;
}




